-- 
-- Scale statistics for vehicle
-- Script: Blacky_BPG
-- 
-- 1.2.1.1      16.11.2016    fixed Handheld display, completed Handheld Software display
-- 1.2.1.0      12.11.2016    initial Version for FS17
-- 

scaleStatistic = {}
scaleStatistic.version = "1.2.1.1"
scaleStatistic.date = "16.11.2016"
scaleStatistic.stat = {}
scaleStatistic.modDir = g_currentModDirectory

function scaleStatistic.prerequisitesPresent(specializations) return true end function scaleStatistic:load(xmlFile) local uiScale = math.min(1,Utils.getNoNil(g_gameSettings:getValue("uiScale"),1)) self.scaleFontSize = 0.016875 * uiScale self.scaleHudW = 0.3 * uiScale self.scaleHudX = 1 - self.scaleHudW - 0.005 self.scaleHudY = g_currentMission.vehicleHudBg.y + g_currentMission.vehicleHudBg.height + 0.001 self.scaleHudH = self.scaleHudW * 1.2890625 * g_screenAspectRatio self.scaleLeftBorder = self.scaleHudX + (0.04125 * uiScale) self.scaleRightBorder = self.scaleHudX + self.scaleHudW - (0.04375 * uiScale) self.scaleUpperBorder = self.scaleHudY + self.scaleHudH - (0.045625 * uiScale) self.scaleBottomBorder = self.scaleHudY + (0.090625 * uiScale) self.scaleHud_small = Overlay:new("scaleHud_small", Utils.getFilename("handheld_small.dds", g_currentMission.scaleStation.hudPath), self.scaleHudX, self.scaleHudY, self.scaleHudW, self.scaleHudH) self.isSelectable = true end function scaleStatistic:delete() end function scaleStatistic:readStream(streamId, connection) end function scaleStatistic:writeStream(streamId, connection) end function scaleStatistic:mouseEvent(posX, posY, isDown, isUp, button) end function scaleStatistic:keyEvent(unicode, sym, modifier, isDown) end function scaleStatistic:update(dt) end function scaleStatistic:updateTick(dt) if self.massTrigger ~= nil then local lSpeed = self.lastSpeed * 3600 if lSpeed <= 3.0 then if self.massTrigger.timerSet == 1 then self.massTrigger.timerSet = 2 end else if self.massTrigger.timerSet ~= 3 then self.massTrigger.timerSet = 1 self.massTrigger.timerCnt = 0 end end end end function scaleStatistic:onLeave() end function scaleStatistic:onEnter() end function scaleStatistic:draw() if self.massTrigger ~= nil then if self.massTrigger.showHud then self.scaleHud_small:render() setTextBold(true) setTextColor(1,1,0.8314,1) local cPos = ((self.scaleRightBorder - self.scaleLeftBorder) / 2) + self.scaleLeftBorder local lPos = self.scaleLeftBorder + (self.scaleFontSize / 2) local ePos = self.scaleLeftBorder + (self.scaleFontSize * 1.25) local rPos = self.scaleRightBorder - (self.scaleFontSize / 2) setTextAlignment(RenderText.ALIGN_CENTER) local posY = self.scaleUpperBorder - self.scaleFontSize renderText(cPos, posY, self.scaleFontSize + 0.002, string.format(g_i18n:getText("scaleString3"),self.massTrigger.name)) posY = posY - (self.scaleFontSize * 1.85) renderText(cPos + 0.001, posY, self.scaleFontSize, "___________________________________________________") renderText(cPos, posY, self.scaleFontSize, "___________________________________________________") renderText(cPos - 0.001, posY, self.scaleFontSize, "___________________________________________________") posY = posY - (self.scaleFontSize * 1.5) if self.massTrigger.timerSet >= 2 then setTextBold(false) setTextAlignment(RenderText.ALIGN_LEFT) renderText(lPos, posY, self.scaleFontSize, g_i18n:getText("scaleString6")) setTextAlignment(RenderText.ALIGN_RIGHT) renderText(rPos, posY, self.scaleFontSize, self.massTrigger.playerName) end if self.massTrigger.timerSet >= 3 then setTextAlignment(RenderText.ALIGN_LEFT) posY = posY - (self.scaleFontSize * 1.3333) renderText(lPos, posY, self.scaleFontSize, g_i18n:getText("scaleString7")) posY = posY - (self.scaleFontSize * 1.3333) if table.maxn(self.massTrigger.fillTypes) > 0 then for i=1,table.maxn(self.massTrigger.fillTypes) do if self.massTrigger.fillTypes[i] ~= nil and self.massTrigger.fillTypes[i] > 0 then local name = FillUtil.fillTypeIndexToDesc[i].nameI18N setTextColor(1,1,0.8314,1) setTextAlignment(RenderText.ALIGN_LEFT) renderText(ePos, posY, self.scaleFontSize, name) setTextAlignment(RenderText.ALIGN_RIGHT) if self.massTrigger.timerSet == 3 then setTextColor(0.7314,1,0.7314,1) renderText(rPos, posY, self.scaleFontSize, tostring(math.floor(self.massTrigger.fillTypes[i]*1000)/1000).." kg") else setTextColor(1,0.7314,0.7314,1) renderText(rPos, posY, self.scaleFontSize, "...... t") end posY = posY - (self.scaleFontSize * 1.5) end end end if self.massTrigger.timerSet == 3 then setTextColor(1,1,0.8314,1) setTextAlignment(RenderText.ALIGN_LEFT) posY = posY + (self.scaleFontSize / 1.25) renderText(ePos, posY, self.scaleFontSize, "-------------------------------------------------------------") posY = posY - self.scaleFontSize - 0.0008 renderText(ePos, posY, self.scaleFontSize, g_i18n:getText("scaleString8")) setTextAlignment(RenderText.ALIGN_RIGHT) setTextColor(0.7314,1,0.7314,1) renderText(rPos, posY, self.scaleFontSize, tostring(math.floor(self.massTrigger.sumMassLoad*1000)/1000).." kg") end end posY = self.scaleBottomBorder + self.scaleFontSize setTextColor(0.7314,1,0.7314,1) setTextAlignment(RenderText.ALIGN_LEFT) renderText(ePos, posY, self.scaleFontSize, self.massTrigger.playerName) setTextAlignment(RenderText.ALIGN_RIGHT) if self.massTrigger.player[self.massTrigger.playerName] == nil and self.massTrigger.playerName ~= nil then renderText(rPos, posY, self.scaleFontSize, tostring("0 kg")) else renderText(rPos, posY, self.scaleFontSize, tostring(math.floor(self.massTrigger.player[self.massTrigger.playerName].mass*1000)/1000).." kg") end posY = posY + (self.scaleFontSize * 1.5) setTextAlignment(RenderText.ALIGN_LEFT) setTextColor(1,1,0.8314,1) renderText(lPos, posY, self.scaleFontSize, g_i18n:getText("scaleString10")) posY = posY + (self.scaleFontSize * 1.25) setTextAlignment(RenderText.ALIGN_CENTER) renderText(cPos + 0.001, posY, self.scaleFontSize, "__________________________________________________") renderText(cPos, posY, self.scaleFontSize, "__________________________________________________") renderText(cPos - 0.001, posY, self.scaleFontSize, "__________________________________________________") posY = posY + (self.scaleFontSize * 0.75) setTextAlignment(RenderText.ALIGN_RIGHT) setTextColor(0.7314,1,0.7314,1) renderText(rPos, posY, self.scaleFontSize, tostring(math.floor(self.massTrigger.overallMass*1000)/1000).." kg") posY = posY + (self.scaleFontSize * 1.5) setTextAlignment(RenderText.ALIGN_LEFT) setTextColor(1,1,0.8314,1) renderText(lPos, posY, self.scaleFontSize, g_i18n:getText("scaleString9")) posY = posY + (self.scaleFontSize * 1.25) setTextAlignment(RenderText.ALIGN_CENTER) renderText(cPos + 0.001, posY, self.scaleFontSize, "__________________________________________________") renderText(cPos, posY, self.scaleFontSize, "__________________________________________________") renderText(cPos - 0.001, posY, self.scaleFontSize, "__________________________________________________") posY = posY + (self.scaleFontSize * 3) if self.massTrigger.showWarn ~= nil and self.massTrigger.warnMessage ~= nil then setTextColor(1,0,0,1) setTextAlignment(RenderText.ALIGN_LEFT) renderText(lPos, posY, self.scaleFontSize, self.massTrigger.warnMessage) end end end setTextColor(1,1,1,1) setTextAlignment(RenderText.ALIGN_LEFT) setTextBold(false) end if MapUtils ~= nil and MapUtils.utilitys ~= nil then table.insert(MapUtils.utilitys,{name="Scale statistics for vehicle" ,version=tostring(scaleStatistic.version), date=tostring(scaleStatistic.date)}) else print(" ++ loading Scale Statistic Specialization V "..tostring(scaleStatistic.version).." - "..tostring(scaleStatistic.date).." (by Blacky_BPG)") end
